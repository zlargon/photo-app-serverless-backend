# NOTE: update this with your service name
service: photo-app

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack

custom:
  # Set the table name here so we can use it while testing locally
  tableName: ${self:service}-${self:provider.stage}-photos

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource: !GetAtt [ServerlessTable, Arn]

functions:
  create:
    handler: lambda/create.main
    events:
      - http:
          path: photos
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: lambda/get.main
    events:
      - http:
          path: photos/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: lambda/list.main
    events:
      - http:
          path: photos
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: lambda/update.main
    events:
      - http:
          path: photos/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: lambda/delete.main
    events:
      - http:
          path: photos/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  validate_credit_card:
    handler: lambda/validate_credit_card.main
    events:
      - http:
          path: validate_credit_card/{card_number}
          method: get
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-attachment-bucket.yml)}
  - ${file(resources/s3-react-app-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  # Cloud Front (this will take very long time)
  # - ${file(resources/website-cloudfront.yml)}
